package external

import (
	"context"
	"errors"
	"fmt"

	"github.com/google/uuid"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/service/cloudfront"
	"github.com/google/wire"
	"github.com/nao1215/spare/app/domain/model"
	"github.com/nao1215/spare/app/domain/service"
	"github.com/nao1215/spare/utils/errfmt"
)

// CDNCreatorSet is a provider set for CDNCreator.
//
//nolint:gochecknoglobals
var CDNCreatorSet = wire.NewSet(
	NewCloudFrontCDNCreator,
	wire.Bind(new(service.CDNCreator), new(*CloudFrontCDNCreator)),
)

// CloudFrontCDNCreator is an implementation for CDNCreator.
type CloudFrontCDNCreator struct {
	*cloudfront.CloudFront
}

var _ service.CDNCreator = &CloudFrontCDNCreator{}

// NewCloudFrontCDNCreator returns a new CloudFrontCDNCreator struct.
func NewCloudFrontCDNCreator(profile model.AWSProfile, region model.Region, endpoint *model.Endpoint) *CloudFrontCDNCreator {
	return &CloudFrontCDNCreator{
		CloudFront: cloudfront.New(newS3Session(profile, region, endpoint)),
	}
}

// CreateCDN creates a CDN.
func (c *CloudFrontCDNCreator) CreateCDN(_ context.Context, input *service.CDNCreatorInput) (*service.CDNCreatorOutput, error) {
	createDistributionInput := &cloudfront.CreateDistributionInput{
		DistributionConfig: &cloudfront.DistributionConfig{
			Comment:         aws.String("CloudFront Distribution Generated by Spare"),
			CallerReference: aws.String(uuid.New().String()),
			DefaultCacheBehavior: &cloudfront.DefaultCacheBehavior{
				TargetOriginId:       aws.String("S3 Origin ID Generated by Spare"),
				ViewerProtocolPolicy: aws.String("redirect-to-https"),
				MinTTL:               aws.Int64(300), //nolint:gomnd
				MaxTTL:               aws.Int64(300), //nolint:gomnd
				DefaultTTL:           aws.Int64(300), //nolint:gomnd
				AllowedMethods: &cloudfront.AllowedMethods{
					Items: []*string{
						aws.String("GET"),
						aws.String("HEAD"),
						aws.String("OPTIONS"),
					},
					Quantity: aws.Int64(3),
					CachedMethods: &cloudfront.CachedMethods{
						Items: []*string{
							aws.String("GET"),
							aws.String("HEAD"),
						},
						Quantity: aws.Int64(2), //nolint:gomnd
					},
				},
				// Deprecated fields
				ForwardedValues: &cloudfront.ForwardedValues{
					QueryString: aws.Bool(true),
					Cookies: &cloudfront.CookiePreference{
						Forward: aws.String("none"),
					},
				},
			},
			DefaultRootObject: aws.String("index.html"),
			HttpVersion:       aws.String("http2and3"),
			PriceClass:        aws.String("PriceClass_100"),
			Origins: &cloudfront.Origins{
				Items: []*cloudfront.Origin{
					{
						Id:         aws.String("S3 Origin ID Generated by Spare"),
						DomainName: aws.String(input.BucketName.Domain()),
						S3OriginConfig: &cloudfront.S3OriginConfig{
							OriginAccessIdentity: aws.String(fmt.Sprintf("origin-access-identity/cloudfront/%s", *input.OAIID)),
						},
					},
				},
				Quantity: aws.Int64(1),
			},
			Enabled: aws.Bool(true),
		},
	}

	output, err := c.CreateDistribution(createDistributionInput)
	if err != nil {
		var awsErr awserr.Error
		if errors.As(err, &awsErr) {
			switch awsErr.Code() {
			case cloudfront.ErrCodeDistributionAlreadyExists:
				return nil, service.ErrCDNAlreadyExists
			default:
			}
		}
		return nil, errfmt.Wrap(err, "failed to create a cloudfront distribution")
	}

	return &service.CDNCreatorOutput{
		Domain: model.Domain(*output.Distribution.DomainName),
	}, nil
}

// OAICreatorSet is a provider set for OAICreator.
//
//nolint:gochecknoglobals
var OAICreatorSet = wire.NewSet(
	NewCloudFrontOAICreator,
	wire.Bind(new(service.OAICreator), new(*CloudFrontOAICreator)),
)

// CloudFrontOAICreator is an implementation for OAICreator.
type CloudFrontOAICreator struct {
	*cloudfront.CloudFront
}

var _ service.OAICreator = &CloudFrontOAICreator{}

// NewCloudFrontOAICreator returns a new CloudFrontOAICreator struct.
func NewCloudFrontOAICreator(profile model.AWSProfile, region model.Region, endpoint *model.Endpoint) *CloudFrontOAICreator {
	return &CloudFrontOAICreator{
		CloudFront: cloudfront.New(newS3Session(profile, region, endpoint)),
	}
}

// CreateOAI creates a new OAI.
func (c *CloudFrontOAICreator) CreateOAI(_ context.Context, _ *service.OAICreatorInput) (*service.OAICreatorOutput, error) {
	createOAIInput := &cloudfront.CreateCloudFrontOriginAccessIdentityInput{
		CloudFrontOriginAccessIdentityConfig: &cloudfront.OriginAccessIdentityConfig{
			CallerReference: aws.String(uuid.NewString()),
			Comment:         aws.String("Origin Access Identity (OAI) Generated by Spare"),
		},
	}

	output, err := c.CreateCloudFrontOriginAccessIdentity(createOAIInput)
	if err != nil {
		var awsErr awserr.Error
		if errors.As(err, &awsErr) {
			switch awsErr.Code() {
			case cloudfront.ErrCodeOriginAccessControlAlreadyExists:
				return nil, service.ErrOriginAccessIdentifyAlreadyExists
			default:
				return nil, err
			}
		}
		return nil, err
	}
	return &service.OAICreatorOutput{
		ID: output.CloudFrontOriginAccessIdentity.Id,
	}, nil
}
